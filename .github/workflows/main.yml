name: Build, Test, and Analyze
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build-and-test:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  #important for SonarCloud to get all history for reporting

      - name: Extract .NET version
        id: extract-version
        shell: pwsh
        run: |
          if (Test-Path "EasyParse/global.json") {
            $version = (Get-Content "EasyParse/global.json" | ConvertFrom-Json).sdk.version
            "dotnet_version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } 
          else {
            Write-Host "global.json not found, using latest LTS version"
            "dotnet_version=8.0.x" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          }
          Write-Host "Dotnet Version was $version"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ steps.extract-version.outputs.dotnet_version }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\.sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Install SonarCloud scanner
        run: |
          dotnet tool install --global dotnet-sonarscanner

      - name: Begin SonarCloud analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin /k:"your-project-key" /o:"your-org" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"

      - name: Restore dependencies
        shell: pwsh
        run: dotnet restore 
        
      - name: Build
        shell: pwsh
        run: dotnet build --configuration Release --no-restore

      - name: Test with coverage
        shell: pwsh
        run: dotnet test --configuration Release --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

      - name: End SonarCloud analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
